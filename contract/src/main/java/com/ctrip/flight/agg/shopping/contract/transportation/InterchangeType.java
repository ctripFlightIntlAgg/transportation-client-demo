// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.ctrip.flight.agg.shopping.contract.transportation.proto

package com.ctrip.flight.agg.shopping.contract.transportation;

/**
 * Protobuf type {@code com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType}
 */
public  final class InterchangeType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)
    InterchangeTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InterchangeType.newBuilder() to construct.
  private InterchangeType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InterchangeType() {
    journeyNo_ = 0;
    segmentNo_ = 0;
    position_ = 0;
    interchangeRoute_ = java.util.Collections.emptyList();
    textRemarkRef_ = 0;
    checkInRemarkRef_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InterchangeType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            journeyNo_ = input.readInt32();
            break;
          }
          case 16: {

            segmentNo_ = input.readInt32();
            break;
          }
          case 24: {

            position_ = input.readInt32();
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              interchangeRoute_ = new java.util.ArrayList<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType>();
              mutable_bitField0_ |= 0x00000008;
            }
            interchangeRoute_.add(
                input.readMessage(com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.parser(), extensionRegistry));
            break;
          }
          case 40: {

            textRemarkRef_ = input.readInt32();
            break;
          }
          case 48: {

            checkInRemarkRef_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        interchangeRoute_ = java.util.Collections.unmodifiableList(interchangeRoute_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.ctrip.flight.agg.shopping.contract.transportation.ComCtripFlightAggShoppingContractTransportation.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_InterchangeType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.ctrip.flight.agg.shopping.contract.transportation.ComCtripFlightAggShoppingContractTransportation.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_InterchangeType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.class, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.Builder.class);
  }

  private int bitField0_;
  public static final int JOURNEYNO_FIELD_NUMBER = 1;
  private int journeyNo_;
  /**
   * <pre>
   * 程号，从1开始
   * </pre>
   *
   * <code>int32 JourneyNo = 1;</code>
   */
  public int getJourneyNo() {
    return journeyNo_;
  }

  public static final int SEGMENTNO_FIELD_NUMBER = 2;
  private int segmentNo_;
  /**
   * <pre>
   * 每一程内的段号，从1开始
   * </pre>
   *
   * <code>int32 SegmentNo = 2;</code>
   */
  public int getSegmentNo() {
    return segmentNo_;
  }

  public static final int POSITION_FIELD_NUMBER = 3;
  private int position_;
  /**
   * <pre>
   * 换乘信息是在段前还是段后， 1：段前， 2：段后
   * </pre>
   *
   * <code>int32 Position = 3;</code>
   */
  public int getPosition() {
    return position_;
  }

  public static final int INTERCHANGEROUTE_FIELD_NUMBER = 4;
  private java.util.List<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType> interchangeRoute_;
  /**
   * <pre>
   * 换乘的格式化信息, List表示不同的换乘路线
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
   */
  public java.util.List<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType> getInterchangeRouteList() {
    return interchangeRoute_;
  }
  /**
   * <pre>
   * 换乘的格式化信息, List表示不同的换乘路线
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
   */
  public java.util.List<? extends com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder> 
      getInterchangeRouteOrBuilderList() {
    return interchangeRoute_;
  }
  /**
   * <pre>
   * 换乘的格式化信息, List表示不同的换乘路线
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
   */
  public int getInterchangeRouteCount() {
    return interchangeRoute_.size();
  }
  /**
   * <pre>
   * 换乘的格式化信息, List表示不同的换乘路线
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
   */
  public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType getInterchangeRoute(int index) {
    return interchangeRoute_.get(index);
  }
  /**
   * <pre>
   * 换乘的格式化信息, List表示不同的换乘路线
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
   */
  public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder getInterchangeRouteOrBuilder(
      int index) {
    return interchangeRoute_.get(index);
  }

  public static final int TEXTREMARKREF_FIELD_NUMBER = 5;
  private int textRemarkRef_;
  /**
   * <pre>
   * 换乘的非格式化信息，索引号
   * </pre>
   *
   * <code>int32 TextRemarkRef = 5;</code>
   */
  public int getTextRemarkRef() {
    return textRemarkRef_;
  }

  public static final int CHECKINREMARKREF_FIELD_NUMBER = 6;
  private int checkInRemarkRef_;
  /**
   * <pre>
   * CheckIn的描述信息, 索引号
   * </pre>
   *
   * <code>int32 CheckInRemarkRef = 6;</code>
   */
  public int getCheckInRemarkRef() {
    return checkInRemarkRef_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (journeyNo_ != 0) {
      output.writeInt32(1, journeyNo_);
    }
    if (segmentNo_ != 0) {
      output.writeInt32(2, segmentNo_);
    }
    if (position_ != 0) {
      output.writeInt32(3, position_);
    }
    for (int i = 0; i < interchangeRoute_.size(); i++) {
      output.writeMessage(4, interchangeRoute_.get(i));
    }
    if (textRemarkRef_ != 0) {
      output.writeInt32(5, textRemarkRef_);
    }
    if (checkInRemarkRef_ != 0) {
      output.writeInt32(6, checkInRemarkRef_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (journeyNo_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, journeyNo_);
    }
    if (segmentNo_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, segmentNo_);
    }
    if (position_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, position_);
    }
    for (int i = 0; i < interchangeRoute_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, interchangeRoute_.get(i));
    }
    if (textRemarkRef_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, textRemarkRef_);
    }
    if (checkInRemarkRef_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, checkInRemarkRef_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)) {
      return super.equals(obj);
    }
    com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType other = (com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType) obj;

    boolean result = true;
    result = result && (getJourneyNo()
        == other.getJourneyNo());
    result = result && (getSegmentNo()
        == other.getSegmentNo());
    result = result && (getPosition()
        == other.getPosition());
    result = result && getInterchangeRouteList()
        .equals(other.getInterchangeRouteList());
    result = result && (getTextRemarkRef()
        == other.getTextRemarkRef());
    result = result && (getCheckInRemarkRef()
        == other.getCheckInRemarkRef());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + JOURNEYNO_FIELD_NUMBER;
    hash = (53 * hash) + getJourneyNo();
    hash = (37 * hash) + SEGMENTNO_FIELD_NUMBER;
    hash = (53 * hash) + getSegmentNo();
    hash = (37 * hash) + POSITION_FIELD_NUMBER;
    hash = (53 * hash) + getPosition();
    if (getInterchangeRouteCount() > 0) {
      hash = (37 * hash) + INTERCHANGEROUTE_FIELD_NUMBER;
      hash = (53 * hash) + getInterchangeRouteList().hashCode();
    }
    hash = (37 * hash) + TEXTREMARKREF_FIELD_NUMBER;
    hash = (53 * hash) + getTextRemarkRef();
    hash = (37 * hash) + CHECKINREMARKREF_FIELD_NUMBER;
    hash = (53 * hash) + getCheckInRemarkRef();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)
      com.ctrip.flight.agg.shopping.contract.transportation.InterchangeTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ctrip.flight.agg.shopping.contract.transportation.ComCtripFlightAggShoppingContractTransportation.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_InterchangeType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ctrip.flight.agg.shopping.contract.transportation.ComCtripFlightAggShoppingContractTransportation.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_InterchangeType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.class, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.Builder.class);
    }

    // Construct using com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getInterchangeRouteFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      journeyNo_ = 0;

      segmentNo_ = 0;

      position_ = 0;

      if (interchangeRouteBuilder_ == null) {
        interchangeRoute_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        interchangeRouteBuilder_.clear();
      }
      textRemarkRef_ = 0;

      checkInRemarkRef_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.ctrip.flight.agg.shopping.contract.transportation.ComCtripFlightAggShoppingContractTransportation.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_InterchangeType_descriptor;
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType getDefaultInstanceForType() {
      return com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.getDefaultInstance();
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType build() {
      com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType buildPartial() {
      com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType result = new com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.journeyNo_ = journeyNo_;
      result.segmentNo_ = segmentNo_;
      result.position_ = position_;
      if (interchangeRouteBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          interchangeRoute_ = java.util.Collections.unmodifiableList(interchangeRoute_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.interchangeRoute_ = interchangeRoute_;
      } else {
        result.interchangeRoute_ = interchangeRouteBuilder_.build();
      }
      result.textRemarkRef_ = textRemarkRef_;
      result.checkInRemarkRef_ = checkInRemarkRef_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType) {
        return mergeFrom((com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType other) {
      if (other == com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType.getDefaultInstance()) return this;
      if (other.getJourneyNo() != 0) {
        setJourneyNo(other.getJourneyNo());
      }
      if (other.getSegmentNo() != 0) {
        setSegmentNo(other.getSegmentNo());
      }
      if (other.getPosition() != 0) {
        setPosition(other.getPosition());
      }
      if (interchangeRouteBuilder_ == null) {
        if (!other.interchangeRoute_.isEmpty()) {
          if (interchangeRoute_.isEmpty()) {
            interchangeRoute_ = other.interchangeRoute_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInterchangeRouteIsMutable();
            interchangeRoute_.addAll(other.interchangeRoute_);
          }
          onChanged();
        }
      } else {
        if (!other.interchangeRoute_.isEmpty()) {
          if (interchangeRouteBuilder_.isEmpty()) {
            interchangeRouteBuilder_.dispose();
            interchangeRouteBuilder_ = null;
            interchangeRoute_ = other.interchangeRoute_;
            bitField0_ = (bitField0_ & ~0x00000008);
            interchangeRouteBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInterchangeRouteFieldBuilder() : null;
          } else {
            interchangeRouteBuilder_.addAllMessages(other.interchangeRoute_);
          }
        }
      }
      if (other.getTextRemarkRef() != 0) {
        setTextRemarkRef(other.getTextRemarkRef());
      }
      if (other.getCheckInRemarkRef() != 0) {
        setCheckInRemarkRef(other.getCheckInRemarkRef());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int journeyNo_ ;
    /**
     * <pre>
     * 程号，从1开始
     * </pre>
     *
     * <code>int32 JourneyNo = 1;</code>
     */
    public int getJourneyNo() {
      return journeyNo_;
    }
    /**
     * <pre>
     * 程号，从1开始
     * </pre>
     *
     * <code>int32 JourneyNo = 1;</code>
     */
    public Builder setJourneyNo(int value) {
      
      journeyNo_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 程号，从1开始
     * </pre>
     *
     * <code>int32 JourneyNo = 1;</code>
     */
    public Builder clearJourneyNo() {
      
      journeyNo_ = 0;
      onChanged();
      return this;
    }

    private int segmentNo_ ;
    /**
     * <pre>
     * 每一程内的段号，从1开始
     * </pre>
     *
     * <code>int32 SegmentNo = 2;</code>
     */
    public int getSegmentNo() {
      return segmentNo_;
    }
    /**
     * <pre>
     * 每一程内的段号，从1开始
     * </pre>
     *
     * <code>int32 SegmentNo = 2;</code>
     */
    public Builder setSegmentNo(int value) {
      
      segmentNo_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 每一程内的段号，从1开始
     * </pre>
     *
     * <code>int32 SegmentNo = 2;</code>
     */
    public Builder clearSegmentNo() {
      
      segmentNo_ = 0;
      onChanged();
      return this;
    }

    private int position_ ;
    /**
     * <pre>
     * 换乘信息是在段前还是段后， 1：段前， 2：段后
     * </pre>
     *
     * <code>int32 Position = 3;</code>
     */
    public int getPosition() {
      return position_;
    }
    /**
     * <pre>
     * 换乘信息是在段前还是段后， 1：段前， 2：段后
     * </pre>
     *
     * <code>int32 Position = 3;</code>
     */
    public Builder setPosition(int value) {
      
      position_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 换乘信息是在段前还是段后， 1：段前， 2：段后
     * </pre>
     *
     * <code>int32 Position = 3;</code>
     */
    public Builder clearPosition() {
      
      position_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType> interchangeRoute_ =
      java.util.Collections.emptyList();
    private void ensureInterchangeRouteIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        interchangeRoute_ = new java.util.ArrayList<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType>(interchangeRoute_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder> interchangeRouteBuilder_;

    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public java.util.List<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType> getInterchangeRouteList() {
      if (interchangeRouteBuilder_ == null) {
        return java.util.Collections.unmodifiableList(interchangeRoute_);
      } else {
        return interchangeRouteBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public int getInterchangeRouteCount() {
      if (interchangeRouteBuilder_ == null) {
        return interchangeRoute_.size();
      } else {
        return interchangeRouteBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType getInterchangeRoute(int index) {
      if (interchangeRouteBuilder_ == null) {
        return interchangeRoute_.get(index);
      } else {
        return interchangeRouteBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder setInterchangeRoute(
        int index, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType value) {
      if (interchangeRouteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.set(index, value);
        onChanged();
      } else {
        interchangeRouteBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder setInterchangeRoute(
        int index, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder builderForValue) {
      if (interchangeRouteBuilder_ == null) {
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.set(index, builderForValue.build());
        onChanged();
      } else {
        interchangeRouteBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder addInterchangeRoute(com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType value) {
      if (interchangeRouteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.add(value);
        onChanged();
      } else {
        interchangeRouteBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder addInterchangeRoute(
        int index, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType value) {
      if (interchangeRouteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.add(index, value);
        onChanged();
      } else {
        interchangeRouteBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder addInterchangeRoute(
        com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder builderForValue) {
      if (interchangeRouteBuilder_ == null) {
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.add(builderForValue.build());
        onChanged();
      } else {
        interchangeRouteBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder addInterchangeRoute(
        int index, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder builderForValue) {
      if (interchangeRouteBuilder_ == null) {
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.add(index, builderForValue.build());
        onChanged();
      } else {
        interchangeRouteBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder addAllInterchangeRoute(
        java.lang.Iterable<? extends com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType> values) {
      if (interchangeRouteBuilder_ == null) {
        ensureInterchangeRouteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, interchangeRoute_);
        onChanged();
      } else {
        interchangeRouteBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder clearInterchangeRoute() {
      if (interchangeRouteBuilder_ == null) {
        interchangeRoute_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        interchangeRouteBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public Builder removeInterchangeRoute(int index) {
      if (interchangeRouteBuilder_ == null) {
        ensureInterchangeRouteIsMutable();
        interchangeRoute_.remove(index);
        onChanged();
      } else {
        interchangeRouteBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder getInterchangeRouteBuilder(
        int index) {
      return getInterchangeRouteFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder getInterchangeRouteOrBuilder(
        int index) {
      if (interchangeRouteBuilder_ == null) {
        return interchangeRoute_.get(index);  } else {
        return interchangeRouteBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public java.util.List<? extends com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder> 
         getInterchangeRouteOrBuilderList() {
      if (interchangeRouteBuilder_ != null) {
        return interchangeRouteBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(interchangeRoute_);
      }
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder addInterchangeRouteBuilder() {
      return getInterchangeRouteFieldBuilder().addBuilder(
          com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.getDefaultInstance());
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder addInterchangeRouteBuilder(
        int index) {
      return getInterchangeRouteFieldBuilder().addBuilder(
          index, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.getDefaultInstance());
    }
    /**
     * <pre>
     * 换乘的格式化信息, List表示不同的换乘路线
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType InterchangeRoute = 4;</code>
     */
    public java.util.List<com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder> 
         getInterchangeRouteBuilderList() {
      return getInterchangeRouteFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder> 
        getInterchangeRouteFieldBuilder() {
      if (interchangeRouteBuilder_ == null) {
        interchangeRouteBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteType.Builder, com.ctrip.flight.agg.shopping.contract.transportation.InterchangeRouteTypeOrBuilder>(
                interchangeRoute_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        interchangeRoute_ = null;
      }
      return interchangeRouteBuilder_;
    }

    private int textRemarkRef_ ;
    /**
     * <pre>
     * 换乘的非格式化信息，索引号
     * </pre>
     *
     * <code>int32 TextRemarkRef = 5;</code>
     */
    public int getTextRemarkRef() {
      return textRemarkRef_;
    }
    /**
     * <pre>
     * 换乘的非格式化信息，索引号
     * </pre>
     *
     * <code>int32 TextRemarkRef = 5;</code>
     */
    public Builder setTextRemarkRef(int value) {
      
      textRemarkRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 换乘的非格式化信息，索引号
     * </pre>
     *
     * <code>int32 TextRemarkRef = 5;</code>
     */
    public Builder clearTextRemarkRef() {
      
      textRemarkRef_ = 0;
      onChanged();
      return this;
    }

    private int checkInRemarkRef_ ;
    /**
     * <pre>
     * CheckIn的描述信息, 索引号
     * </pre>
     *
     * <code>int32 CheckInRemarkRef = 6;</code>
     */
    public int getCheckInRemarkRef() {
      return checkInRemarkRef_;
    }
    /**
     * <pre>
     * CheckIn的描述信息, 索引号
     * </pre>
     *
     * <code>int32 CheckInRemarkRef = 6;</code>
     */
    public Builder setCheckInRemarkRef(int value) {
      
      checkInRemarkRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * CheckIn的描述信息, 索引号
     * </pre>
     *
     * <code>int32 CheckInRemarkRef = 6;</code>
     */
    public Builder clearCheckInRemarkRef() {
      
      checkInRemarkRef_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)
  }

  // @@protoc_insertion_point(class_scope:com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType)
  private static final com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType();
  }

  public static com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InterchangeType>
      PARSER = new com.google.protobuf.AbstractParser<InterchangeType>() {
    @java.lang.Override
    public InterchangeType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InterchangeType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InterchangeType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InterchangeType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.ctrip.flight.agg.shopping.contract.transportation.InterchangeType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

