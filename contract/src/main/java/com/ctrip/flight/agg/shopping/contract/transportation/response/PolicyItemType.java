// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.ctrip.flight.agg.shopping.contract.transportation.response.proto

package com.ctrip.flight.agg.shopping.contract.transportation.response;

/**
 * <pre>
 * 主政策信息
 * </pre>
 *
 * Protobuf type {@code com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType}
 */
public  final class PolicyItemType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)
    PolicyItemTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PolicyItemType.newBuilder() to construct.
  private PolicyItemType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PolicyItemType() {
    supplierType_ = 0;
    policyType_ = "";
    policyGroup_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PolicyItemType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            supplierType_ = input.readInt32();
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            policyType_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              policyGroup_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            policyGroup_.add(s);
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        policyGroup_ = policyGroup_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.ctrip.flight.agg.shopping.contract.transportation.response.ComCtripFlightAggShoppingContractTransportationResponse.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_response_PolicyItemType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.ctrip.flight.agg.shopping.contract.transportation.response.ComCtripFlightAggShoppingContractTransportationResponse.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_response_PolicyItemType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.class, com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.Builder.class);
  }

  private int bitField0_;
  public static final int SUPPLIERTYPE_FIELD_NUMBER = 1;
  private int supplierType_;
  /**
   * <pre>
   **
   *供应商类型，对应enum:SupplierTypeConst
   *0	 :未定义（程序没有给变量赋值）
   *1	 :自有票台
   *2	 :普通供应商
   *3	 :航司供应商，航司通过平台录入政策
   *4	 :航司直营，PS＝4
   *5	 :航司旗舰店  通过去哪儿平台
   *255	 :未知类型（程序无法确定类型）
   * </pre>
   *
   * <code>int32 SupplierType = 1;</code>
   */
  public int getSupplierType() {
    return supplierType_;
  }

  public static final int POLICYTYPE_FIELD_NUMBER = 2;
  private volatile java.lang.Object policyType_;
  /**
   * <pre>
   **
   *政策类型，如FD/NFD/特价/佣金等
   *[autoGenerated commentRef="PolicyTypeConst"]
   *UNDEFINED	 :未定义（程序没有给变量赋值）
   *UNKNOWN	 :未知类型（程序无法确定类型）
   *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
   *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
   *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
   *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
   *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
   *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
   *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
   *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
   *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
   *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
   *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
   *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
   *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
   *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
   *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
   *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
   *OW_NDC	 :单程NDC
   *TS_NDC	 :中转NDC
   *RT_NDC	 :往返NDC
   *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
   *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
   *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
   *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
   *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
   *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
   * </pre>
   *
   * <code>string PolicyType = 2;</code>
   */
  public java.lang.String getPolicyType() {
    java.lang.Object ref = policyType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      policyType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   **
   *政策类型，如FD/NFD/特价/佣金等
   *[autoGenerated commentRef="PolicyTypeConst"]
   *UNDEFINED	 :未定义（程序没有给变量赋值）
   *UNKNOWN	 :未知类型（程序无法确定类型）
   *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
   *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
   *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
   *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
   *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
   *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
   *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
   *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
   *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
   *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
   *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
   *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
   *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
   *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
   *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
   *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
   *OW_NDC	 :单程NDC
   *TS_NDC	 :中转NDC
   *RT_NDC	 :往返NDC
   *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
   *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
   *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
   *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
   *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
   *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
   * </pre>
   *
   * <code>string PolicyType = 2;</code>
   */
  public com.google.protobuf.ByteString
      getPolicyTypeBytes() {
    java.lang.Object ref = policyType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      policyType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int POLICYGROUP_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList policyGroup_;
  /**
   * <pre>
   **
   *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
   *[autoGenerated commentRef="PolicyGroupConst"]
   *OW	 :单程政策
   *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
   *TS	 :中转联程政策
   *OJ	 :缺口程政策
   * </pre>
   *
   * <code>repeated string PolicyGroup = 3;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getPolicyGroupList() {
    return policyGroup_;
  }
  /**
   * <pre>
   **
   *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
   *[autoGenerated commentRef="PolicyGroupConst"]
   *OW	 :单程政策
   *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
   *TS	 :中转联程政策
   *OJ	 :缺口程政策
   * </pre>
   *
   * <code>repeated string PolicyGroup = 3;</code>
   */
  public int getPolicyGroupCount() {
    return policyGroup_.size();
  }
  /**
   * <pre>
   **
   *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
   *[autoGenerated commentRef="PolicyGroupConst"]
   *OW	 :单程政策
   *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
   *TS	 :中转联程政策
   *OJ	 :缺口程政策
   * </pre>
   *
   * <code>repeated string PolicyGroup = 3;</code>
   */
  public java.lang.String getPolicyGroup(int index) {
    return policyGroup_.get(index);
  }
  /**
   * <pre>
   **
   *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
   *[autoGenerated commentRef="PolicyGroupConst"]
   *OW	 :单程政策
   *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
   *TS	 :中转联程政策
   *OJ	 :缺口程政策
   * </pre>
   *
   * <code>repeated string PolicyGroup = 3;</code>
   */
  public com.google.protobuf.ByteString
      getPolicyGroupBytes(int index) {
    return policyGroup_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (supplierType_ != 0) {
      output.writeInt32(1, supplierType_);
    }
    if (!getPolicyTypeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, policyType_);
    }
    for (int i = 0; i < policyGroup_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, policyGroup_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (supplierType_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, supplierType_);
    }
    if (!getPolicyTypeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, policyType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < policyGroup_.size(); i++) {
        dataSize += computeStringSizeNoTag(policyGroup_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPolicyGroupList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)) {
      return super.equals(obj);
    }
    com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType other = (com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType) obj;

    boolean result = true;
    result = result && (getSupplierType()
        == other.getSupplierType());
    result = result && getPolicyType()
        .equals(other.getPolicyType());
    result = result && getPolicyGroupList()
        .equals(other.getPolicyGroupList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SUPPLIERTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getSupplierType();
    hash = (37 * hash) + POLICYTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getPolicyType().hashCode();
    if (getPolicyGroupCount() > 0) {
      hash = (37 * hash) + POLICYGROUP_FIELD_NUMBER;
      hash = (53 * hash) + getPolicyGroupList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * 主政策信息
   * </pre>
   *
   * Protobuf type {@code com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)
      com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ctrip.flight.agg.shopping.contract.transportation.response.ComCtripFlightAggShoppingContractTransportationResponse.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_response_PolicyItemType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ctrip.flight.agg.shopping.contract.transportation.response.ComCtripFlightAggShoppingContractTransportationResponse.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_response_PolicyItemType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.class, com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.Builder.class);
    }

    // Construct using com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      supplierType_ = 0;

      policyType_ = "";

      policyGroup_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.ctrip.flight.agg.shopping.contract.transportation.response.ComCtripFlightAggShoppingContractTransportationResponse.internal_static_com_ctrip_flight_agg_shopping_contract_transportation_response_PolicyItemType_descriptor;
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType getDefaultInstanceForType() {
      return com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.getDefaultInstance();
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType build() {
      com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType buildPartial() {
      com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType result = new com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.supplierType_ = supplierType_;
      result.policyType_ = policyType_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        policyGroup_ = policyGroup_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.policyGroup_ = policyGroup_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType) {
        return mergeFrom((com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType other) {
      if (other == com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType.getDefaultInstance()) return this;
      if (other.getSupplierType() != 0) {
        setSupplierType(other.getSupplierType());
      }
      if (!other.getPolicyType().isEmpty()) {
        policyType_ = other.policyType_;
        onChanged();
      }
      if (!other.policyGroup_.isEmpty()) {
        if (policyGroup_.isEmpty()) {
          policyGroup_ = other.policyGroup_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensurePolicyGroupIsMutable();
          policyGroup_.addAll(other.policyGroup_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int supplierType_ ;
    /**
     * <pre>
     **
     *供应商类型，对应enum:SupplierTypeConst
     *0	 :未定义（程序没有给变量赋值）
     *1	 :自有票台
     *2	 :普通供应商
     *3	 :航司供应商，航司通过平台录入政策
     *4	 :航司直营，PS＝4
     *5	 :航司旗舰店  通过去哪儿平台
     *255	 :未知类型（程序无法确定类型）
     * </pre>
     *
     * <code>int32 SupplierType = 1;</code>
     */
    public int getSupplierType() {
      return supplierType_;
    }
    /**
     * <pre>
     **
     *供应商类型，对应enum:SupplierTypeConst
     *0	 :未定义（程序没有给变量赋值）
     *1	 :自有票台
     *2	 :普通供应商
     *3	 :航司供应商，航司通过平台录入政策
     *4	 :航司直营，PS＝4
     *5	 :航司旗舰店  通过去哪儿平台
     *255	 :未知类型（程序无法确定类型）
     * </pre>
     *
     * <code>int32 SupplierType = 1;</code>
     */
    public Builder setSupplierType(int value) {
      
      supplierType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *供应商类型，对应enum:SupplierTypeConst
     *0	 :未定义（程序没有给变量赋值）
     *1	 :自有票台
     *2	 :普通供应商
     *3	 :航司供应商，航司通过平台录入政策
     *4	 :航司直营，PS＝4
     *5	 :航司旗舰店  通过去哪儿平台
     *255	 :未知类型（程序无法确定类型）
     * </pre>
     *
     * <code>int32 SupplierType = 1;</code>
     */
    public Builder clearSupplierType() {
      
      supplierType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object policyType_ = "";
    /**
     * <pre>
     **
     *政策类型，如FD/NFD/特价/佣金等
     *[autoGenerated commentRef="PolicyTypeConst"]
     *UNDEFINED	 :未定义（程序没有给变量赋值）
     *UNKNOWN	 :未知类型（程序无法确定类型）
     *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
     *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
     *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
     *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
     *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
     *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
     *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
     *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
     *OW_NDC	 :单程NDC
     *TS_NDC	 :中转NDC
     *RT_NDC	 :往返NDC
     *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
     *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
     *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
     *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
     * </pre>
     *
     * <code>string PolicyType = 2;</code>
     */
    public java.lang.String getPolicyType() {
      java.lang.Object ref = policyType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        policyType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     **
     *政策类型，如FD/NFD/特价/佣金等
     *[autoGenerated commentRef="PolicyTypeConst"]
     *UNDEFINED	 :未定义（程序没有给变量赋值）
     *UNKNOWN	 :未知类型（程序无法确定类型）
     *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
     *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
     *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
     *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
     *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
     *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
     *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
     *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
     *OW_NDC	 :单程NDC
     *TS_NDC	 :中转NDC
     *RT_NDC	 :往返NDC
     *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
     *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
     *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
     *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
     * </pre>
     *
     * <code>string PolicyType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPolicyTypeBytes() {
      java.lang.Object ref = policyType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        policyType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     **
     *政策类型，如FD/NFD/特价/佣金等
     *[autoGenerated commentRef="PolicyTypeConst"]
     *UNDEFINED	 :未定义（程序没有给变量赋值）
     *UNKNOWN	 :未知类型（程序无法确定类型）
     *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
     *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
     *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
     *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
     *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
     *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
     *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
     *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
     *OW_NDC	 :单程NDC
     *TS_NDC	 :中转NDC
     *RT_NDC	 :往返NDC
     *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
     *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
     *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
     *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
     * </pre>
     *
     * <code>string PolicyType = 2;</code>
     */
    public Builder setPolicyType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      policyType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策类型，如FD/NFD/特价/佣金等
     *[autoGenerated commentRef="PolicyTypeConst"]
     *UNDEFINED	 :未定义（程序没有给变量赋值）
     *UNKNOWN	 :未知类型（程序无法确定类型）
     *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
     *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
     *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
     *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
     *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
     *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
     *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
     *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
     *OW_NDC	 :单程NDC
     *TS_NDC	 :中转NDC
     *RT_NDC	 :往返NDC
     *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
     *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
     *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
     *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
     * </pre>
     *
     * <code>string PolicyType = 2;</code>
     */
    public Builder clearPolicyType() {
      
      policyType_ = getDefaultInstance().getPolicyType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策类型，如FD/NFD/特价/佣金等
     *[autoGenerated commentRef="PolicyTypeConst"]
     *UNDEFINED	 :未定义（程序没有给变量赋值）
     *UNKNOWN	 :未知类型（程序无法确定类型）
     *OW_SPECIAL	 :单程特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyOW
     *RT_SPECIAL	 :往返特价，对应表FltSpecialShard02DB..Flt_ShareSpecialPolicyRT
     *OW_RAW	 :单程佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *RT_RAW	 :往返佣金，对应表FltCommShard02DB..Flt_ShareRawPolicy
     *OW_RULE	 :单程规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *RT_RULE	 :往返规则运价，对应表FltTradePolicyDB..FltRulePolicy
     *OW_FLOAT	 :单程上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *RT_FLOAT	 :往返上浮政策，对应表FltTradePolicyDB..Flt_ShareFloatPolicy
     *OW_OFFICIAL	 :单程公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *RT_OFFICIAL	 :往返公务机政策，对应表FltTradePolicyDB..Flt_CorporateAircraft
     *TS_INTERLINE	 :中转联程，对应表FltTradePolicyDB..Flt_ShareTransitPolicy
     *OJ_OPENJAW	 :缺口程政策，对应表FltTradePolicyDB..Flt_ShareGapPolicy
     *OW_FD	 :单程FD，对应表FltPubDB..Flt_FdPolicy
     *OW_SHAREFD	 :单程共享航班FD，对应表FltPubDB..Flt_ShareFDPolicy
     *RT_FD	 :往返FD，对应表FltPubDB..Flt_FdPolicy
     *OW_NFD	 :普通单程NFD，对应表FltProductDB..Flt_RawFlightfee
     *OW_NDC	 :单程NDC
     *TS_NDC	 :中转NDC
     *RT_NDC	 :往返NDC
     *OW_CORPORATION	 :商旅政策，对应表FltProductDB..Flt_CorpFlightFee
     *OW_VACATION	 :单程度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *RT_VACATION	 :往返度假政策，对应表FltTradePolicyDB..Flt_ShareSpecialPolicy
     *OW_AIRLINE_DIRECT	 :单程航司直连政策，对应表FltCacheDB..FAV_ClassInfo_ZL
     *RT_AIRLINE_DIRECT	 :往返航司直连政策，对应RedisCluster.OAGFlightScheduleDataCache
     *OW_WAITING_POLICY	 :单程候补政策，对应表FltPUBDB..Flt_WaitingPolicy
     * </pre>
     *
     * <code>string PolicyType = 2;</code>
     */
    public Builder setPolicyTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      policyType_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList policyGroup_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensurePolicyGroupIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        policyGroup_ = new com.google.protobuf.LazyStringArrayList(policyGroup_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getPolicyGroupList() {
      return policyGroup_.getUnmodifiableView();
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public int getPolicyGroupCount() {
      return policyGroup_.size();
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public java.lang.String getPolicyGroup(int index) {
      return policyGroup_.get(index);
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public com.google.protobuf.ByteString
        getPolicyGroupBytes(int index) {
      return policyGroup_.getByteString(index);
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public Builder setPolicyGroup(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePolicyGroupIsMutable();
      policyGroup_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public Builder addPolicyGroup(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePolicyGroupIsMutable();
      policyGroup_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public Builder addAllPolicyGroup(
        java.lang.Iterable<java.lang.String> values) {
      ensurePolicyGroupIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, policyGroup_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public Builder clearPolicyGroup() {
      policyGroup_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *政策分组类型列表：代表政策所属的分组，对应enum:PolicyGroupConst
     *[autoGenerated commentRef="PolicyGroupConst"]
     *OW	 :单程政策
     *RT	 :真往返政策(含往返佣金，即PolicyTypeConst=RT_RAW的政策)
     *TS	 :中转联程政策
     *OJ	 :缺口程政策
     * </pre>
     *
     * <code>repeated string PolicyGroup = 3;</code>
     */
    public Builder addPolicyGroupBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensurePolicyGroupIsMutable();
      policyGroup_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)
  }

  // @@protoc_insertion_point(class_scope:com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType)
  private static final com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType();
  }

  public static com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PolicyItemType>
      PARSER = new com.google.protobuf.AbstractParser<PolicyItemType>() {
    @java.lang.Override
    public PolicyItemType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PolicyItemType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PolicyItemType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PolicyItemType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.ctrip.flight.agg.shopping.contract.transportation.response.PolicyItemType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

